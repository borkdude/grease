#!/bin/bash

set -x
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd "$DIR"

PROJECT_DIR="$DIR/.."

cd ..

rm -rf ./classes && mkdir classes
clojure -X com.phronmophobic.mobiletest/compile-interface-class
clojure -X:depstar

# INITIALIZE_AT_BUILD_TIME=`clojure -X com.phronmophobic.mobiletest/initialize-at-build-time-list`
INITIALIZE_AT_BUILD_TIME='clojure,tech.v3.datatype,sci.impl,babashka.nrepl,tech.v3.resource,bencode,flatland.ordered,com.phronmophobic,babashka.nrepl.impl,datascript,edamame.impl,tech.v3,tech.v3.parallel,sci.addons,tech.v3.datatype.ffi,sci,primitive_math,primitive_math$unuse_primitive_operators,primitive_math$using_primitive_operators_QMARK_,primitive_math$use_primitive_operators,primitive_math$variadic_predicate_proxy,primitive_math$variadic_proxy,primitive_math$unuse_primitive_operators,primitive_math$using_primitive_operators_QMARK_,primitive_math$use_primitive_operators,primitive_math$variadic_predicate_proxy,primitive_math$variadic_proxy'


pushd library

rm -rf ./tmp

$GRAALVM_HOME/bin/native-image \
    --report-unsupported-elements-at-runtime \
    --initialize-at-build-time="$INITIALIZE_AT_BUILD_TIME" \
    --no-fallback \
    --no-server \
    -H:CompilerBackend=llvm \
    -H:+ExitAfterRelocatableImageWrite \
    -H:+SharedLibrary \
    -H:+AddAllCharsets \
    -H:+ReportExceptionStackTraces \
    -H:-DeadlockWatchdogExitOnTimeout \
    -H:DeadlockWatchdogInterval=0 \
    -H:+RemoveSaturatedTypeFlows \
    -H:-SpawnIsolates \
    -H:PageSize=16384 \
    -Djdk.internal.lambda.eagerlyInitialize=false \
    -H:+ReportExceptionStackTraces \
    -H:TempDirectory="$PROJECT_DIR"/library/tmp \
    -H:ReflectionConfigurationFiles="${PROJECT_DIR}"/conf/reflectionconfig-arm64-ios.json \
    -H:JNIConfigurationFiles="${PROJECT_DIR}"/conf/jniconfig-arm64-ios.json \
    -H:ResourceConfigurationFiles="${PROJECT_DIR}"/conf/resourceconfig-arm64-ios.json \
    -J-Dclojure.spec.skip-macros=true \
    -J-Xmx20G \
    -J-XX:MaxDirectMemorySize=8G \
    -J-Dclojure.compiler.direct-linking=true \
    -J-Dtech.v3.datatype.graal-native=true \
    -Dsvm.targetName=iOS \
    -Dsvm.targetArch=arm64 \
    -H:+UseCAPCache \
    -H:CAPCacheDir="${PROJECT_DIR}"/conf/capcache \
    '-Dsvm.platform=org.graalvm.nativeimage.Platform$IOS_AARCH64' \
    -jar ../target/mobiletest-uber.jar -cp classes

rm -rf ./build/out
mkdir -p build/out

# grab latest llvm.o file
LLVM_PATH=`find . -name "llvm.o" -print0 |
    xargs -r -0 ls -1 -t |
    head -1`
cp "$LLVM_PATH" build/out

# grab latest mobiletest-uber.o file
MOBILETEST_PATH=`find . -name "mobiletest-uber.o" -print0 |
    xargs -r -0 ls -1 -t |
    head -1`
cp "$MOBILETEST_PATH" build/out

popd
